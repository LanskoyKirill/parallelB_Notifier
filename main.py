import os
import pandas as pd
import telebot
import time
import threading
import urllib.request
import json
import random
from AwakeAllTime import keep_alive

def main() -> None:
    """Start the bot."""
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not token:
        print("Error: TELEGRAM_BOT_TOKEN environment variable is not set!")
        return

    bot = telebot.TeleBot(token)

    def send_periodic_messages():
        goodPhrases = ["–û–≥–æ! –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∑–≤–∞—Ç—å —É—á—ë–Ω—ã—Ö ‚Äî —ç—Ç–æ –Ω–æ–±–µ–ª–µ–≤—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å!",
                      "–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –ì—É–≥–ª –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ Stack Overflow. –≠—Ç–æ —á–∏—Å—Ç–∞—è –º–∞–≥–∏—è.",
                      "–ö–æ–¥ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏ –≤—ã–≥–ª—è–¥–∏—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–æ. –≠—Ç–æ –∂–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞-–µ–¥–∏–Ω–æ—Ä–æ–≥–∞!",
                      "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ë–∞–≥–∏ —Ä–∞–∑–±–µ–≥–∞—é—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∫–æ–¥–∞, –∫–∞–∫ –æ—Ç –æ–≥–Ω—è. –ü—Ä–∏–º–∏—Ç–µ —ç—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–µ—á–µ–Ω—å–∫–∏ üç™.",
                      "–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—à–ª–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–ª—ã –º—ã—Å–ª–∏? –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢–µ–ª–µ–∫–∏–Ω–µ–∑ ‚Äî –≤—Ç–æ—Ä–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è.",
                      "–í—Ä–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω, –±–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –¥–æ–≤–æ–ª–µ–Ω. –ò–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–¥!",
                      "–≠—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –≥–ª–∞–¥–∫–æ, —á—Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω —á–∏—Å—Ç–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞."]
        badSolutions = ["–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ —ç—Ç–æ –Ω–µ —Å–æ–Ω –ø–æ—Å–ª–µ 10 —á–∞—Å–æ–≤ –¥–µ–±–∞–≥–≥–∏–Ω–≥–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —á—É–¥–æ–º!",
                        "–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞! –ú–µ—Ç–æ–¥–æ–º –Ω–∞—É—á–Ω–æ–≥–æ (–∏ –Ω–µ –æ—á–µ–Ω—å) —Ç—ã–∫–∞.:",
                        "–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –≤—Å–µ —Å–ª—É—á–∞–∏. –≠—Ç–æ –Ω–µ —Ä–µ—à–µ–Ω–∏–µ, —ç—Ç–æ –æ–±–º–∞–Ω!",
                       "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–∂–∞—Ç–∏–π Ctrl+C / Ctrl+V –≤ –ø–æ–∏—Å–∫–∞—Ö –æ—Ç–≤–µ—Ç–∞.",
                       "–†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ—Å–ª–µ 100 —á–∞—Å–æ–≤ –¥–µ–±–∞–≥–≥–∏–Ω–≥–∞, 5 –ª–∏—Ç—Ä–æ–≤ –∫–æ—Ñ–µ –∏ –æ–¥–Ω–æ–π –Ω–µ–±–æ–ª—å—à–æ–π –∏—Å—Ç–µ—Ä–∏–∫–∏.",
                       "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏ –æ–Ω, –Ω–∞–∫–æ–Ω–µ—Ü, —Å–¥–∞–ª—Å—è.",
                       "–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—É—Ç—ë–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –∏ –µ—ë –æ–±—Ä–∞—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏. –ì–µ–Ω–∏–∞–ª—å–Ω–æ –∏ –Ω–µ–æ–±—ä—è—Å–Ω–∏–º–æ."]
        badPhrases = ["–ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞, —ç—Ç–æ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞.", "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–∞–≥, —ç—Ç–æ —Ç—Ä–∞–≥–µ–¥–∏—è.",
                      "–ö–∞–∂–µ—Ç—Å—è, –≤–∞—à –∫–æ–¥ –∑–∞–∫–ª—é—á–∏–ª –ø–∞–∫—Ç –æ –Ω–µ–Ω–∞–ø–∞–¥–µ–Ω–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π, –∏ –ª–æ–≥–∏–∫–∞ –ø–æ–±–µ–¥–∏–ª–∞.",
                      "–î–∞–∂–µ console.log –º–æ–ª—á–∏—Ç –≤ –Ω–µ–¥–æ—É–º–µ–Ω–∏–∏, –≥–ª—è–¥—è –Ω–∞ —ç—Ç–æ.",
                      "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ —É–≤–∏–¥–µ–ª –≤–∞—à –∫–æ–¥ –∏ —Å–∞–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è –æ—Ç —É–∂–∞—Å–∞.",
                      "–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–≤–Ω–æ –≤ –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö: –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.",
                      "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø –±–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–Ω–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏.",
                      "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞, –≥–ª—è–¥—è –Ω–∞ –≤–∞—à–∏ –º—É—á–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –Ω–µ –∫–æ—Ñ–µ, –∞ —É—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω–æ–µ.",
                      "–í–∞—à –∫–æ–¥ –≤—ã–¥–∞–ª —Ç–∞–∫—É—é –æ—à–∏–±–∫—É, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –Ω–æ—É—Ç–±—É–∫–µ —Å–∞–º–∞ –≤—ã–∑–≤–∞–ª–∞ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å."]
        badSrickers = ["CAACAgIAAxkBAAEBtSZo_hXFBPw6wpjaehjg2oBiPY2gpwACn2UAAqo2uEujE0fTkum0aDYE",      "CAACAgIAAxkBAAEBtSRo_hQ_J1UIdUhIAAFLhO2X_BSY2v4AAtpsAALkp-FLOhDxTlr4-w42BA",
                      "CAACAgIAAxkBAAEBtSpo_hXO-3KfnULapHZ8uSSJsjeFcwACaXgAAuhRoEvbcX6qdtGMbTYE"]
        pastPeople = {}
        
        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
        
        while True:
            time.sleep(10)
            urlOfRank = "https://ej-3.t-edu.tech/standings-data/b2025"
            data = []
            with urllib.request.urlopen(urlOfRank) as url:
                data = json.loads(url.read().decode())

            contests = data.get('contests', [])
            standings = data.get('standings', [])
            nameOfTasks = [item['name'] + " " + problem['short'] for item in contests for problem in item['problems']]
            people = {item['name']: [problem['tasks'] for problem in item['per_contests']] for item in standings}
            changes = []
            for key in pastPeople:
                if key in people:
                    if(pastPeople[key] != people[key]):
                        for i, v in enumerate(people[key]):
                            if pastPeople[key][i] != v:
                                for j, task in enumerate(v):
                                    if pastPeople[key][i][j] != task:
                                        changes.append([key, task, i])
                                        break
            print(changes)
            str_val = ""
            if len(changes) > 0:
                a = changes[random.randint(0, len(changes) - 1)]
                if a[1] > 0:
                    str_val = f"{a[0]} —Å–º–æ–≥(-–ª–∞) —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É {nameOfTasks[a[2]]} –∑–∞ {abs(a[1])}"
                    if a[1] % 10 == 1:
                        str_val += " –ø–æ–ø—ã—Ç–∫—É!"
                    elif a[1] % 10 in [2, 3, 4]:
                        str_val += " –ø–æ–ø—ã—Ç–∫–∏!"
                    else:
                        str_val += " –ø–æ–ø—ã—Ç–æ–∫!"
                    if a[1] == 1 and random.randint(0, 5) == 0:
                        str_val += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ö–æ–¥ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞. –ù–µ—É–∂–µ–ª–∏ –±—ã–ª–∞ –∑–∞–∫–ª—é—á–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º?"
                    elif a[1] <= 5:
                        str_val += "\n" + goodPhrases[random.randint(0, len(goodPhrases) - 1)]
                    else:
                        str_val += "\n" + badSolutions[random.randint(0, len(badSolutions) - 1)]
                else:
                    str_val = f"{a[0]} –Ω–µ —Å–º–æ–≥(-–ª–∞) —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É {nameOfTasks[a[2]]} –∑–∞ {abs(a[1])}"
                    if abs(a[1]) % 10 == 1:
                        str_val += " –ø–æ–ø—ã—Ç–∫—É!"
                    elif abs(a[1]) % 10 in [2, 3, 4]:
                        str_val += " –ø–æ–ø—ã—Ç–∫–∏!"
                    else:
                        str_val += " –ø–æ–ø—ã—Ç–æ–∫!"
                    str_val += "\n" + badPhrases[random.randint(0, len(badPhrases) - 1)]
                bot.send_message(-1003237662697, str_val)
                if(a[1] > 0 and random.randint(0, 3) == 0):
                    bot.send_sticker(-1003237662697, "CAACAgIAAxkBAAEBtSJo_hQ5EiZL5UOwGE12yZjL9zbrbAACj2oAAvMOSUghNXtEimGGpzYE")
                if(a[1] < 0 and random.randint(0, 3) == 0):
                    bot.send_sticker(-1003237662697, badSrickers[random.randint(0, len(badSrickers) - 1)])
                print(str_val)
            pastPeople = people

    message_thread = threading.Thread(target=send_periodic_messages,
                                      daemon=True)
    message_thread.start()

    print("Bot is starting...")
    bot.infinity_polling()


if __name__ == '__main__':
    main()
